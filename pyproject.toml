[tool.poetry]
name = "transformer"
version = "1.1.0"
description = "TensorFlow implementation of the Transformer model"
license = "MIT"

authors = ["Victor I. Afolabi <javafolabi@gmail.com>"]
maintainers = [
  "Victor I. Afolabi <javafolabi@gmail.com>",
]

readme = "README.md"
repository = "https://github.com/victor-iyi/transformer"
keywords = ["tensorflow", "transformer", "deep-learning"]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

packages = [
  { include = "transformer", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.8, <3.11"

 # TensorFlow for machine learning (general version).
tensorflow = { version = "^2.10.0", markers = "sys_platform != 'darwin'" }
# TensorFlow for MacOS (with Apple silicon)
tensorflow-macos = { version = "^2.10.0", markers = "sys_platform == 'darwin'" }
# TensorFlow acceleration for Mac GPUs.
tensorflow-metal = { version = "*", markers = "sys_platform == 'darwin'", optional = true }
# For array computing with Python.
numpy = ">=1.16"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Automatically format Python code to PEP 8 style guide.
autopep8 = "^2.0.0"
# The modular source checker.
flake8 = {version = "^6.0.0", python = ">=3.8.1"}
# Optional static typing for Python.
mypy = "^0.991"
# Managing and maintaining pre-commit hooks.
pre-commit = "^2.20.0"
# Generic viirtualenv management and test cli tool.
tox = { version = "^4.0.11", python = "~=3.7, <3.11" }
# Python style guide checker.
pydocstyle = {extras = ["toml"], version = "^6.1.1"}
# Python Library for Tom's Obvious, Minimal Language.
# toml = "^0.10.2"
# Formats docstring to follow PEP 257.
docformatter = {version = "^1.5.1", extras = ["tomli"]}

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
# A coverage plugin to provide sensible default settings.
covdefaults = "^2.2.2"
# pytest: simple powerful testing with Python.
pytest = "^7.2.0"
# Pytest plugin for measuring coverage.
pytest-cov = "^4.0.0"

[tool.poetry.group.example]
optional = true

[tool.poetry.group.example.dependencies]
tensorflow-datasets = "^4.7.0"

[tool.poetry.urls]
"Bug Tracker"  = "https://github.com/victor-iyi/transformer/issues"

# Poetry build system. See: https://python-poetry.org/docs/pyproject
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Pytests
[tool.pytest.ini_options]
filterwarnings = [
  "ignore::DeprecationWarning",
]

[tool.autopep8]
recursive = true
# in-place = true
diff = true
max_line_length = 120
agressive = 3

# Docformatter.
[tool.docformatter]
in-place = true
recursive = true
blank = true
close-quotes-on-newline = true

[tool.pydocstyle]
convention = "google"
add_ignore = [
  # Missing docstring in public module.
  "D100",
  # Missing docstring in public class.
  "D101",
  # Missing docstring in public package.
  "D104",
  # No blank line allowed after function docstring.
  "D202",
  # 1 blank line required between summary line and description.
  "D205",
  # First line should end with a period, question mark, or exclamation point.
  "D415",
]

# Style hinting.
[tool.mypy]
files = "src"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
strict = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = true
disallow_incomplete_defs = true
implicit_reexport = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
# show_error_content = true
warn_unused_configs = true
warn_unused_ignores = true
# warn_redundant_cast = true
warn_return_any = true
warn_unreachable = true
disallow_subclassing_any = false
disallow_untyped_decorators = false

# Pyright Type Checking.
[tool.pyright]
reportOptionalCall = "none"
reportGeneralTypeIssues = "none"
reportOptionalMemberAccess = "none"

# Coverage report.
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "if __name__ == .__main__.",
]

[tool.coverage.run]
plugin = "covdefaults"
